{"version":3,"file":"cm-weather.js","sourceRoot":"","sources":["../../../src/components/cm-weather/cm-weather.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAgB,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAE5F,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAC;AAO3D,MAAM,OAAO,SAAS;;;;;EAKpB,iBAAiB;IACf,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,EAAE;MACpB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACtC;EACH,CAAC;EAGD,WAAW;IACT,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAY,CAAC;IAChD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;EAC5B,CAAC;EACD,WAAW;IACT,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EAClC,CAAC;EAED,MAAM;IACJ,IAAI,IAAI,CAAC,OAAO,KAAK,SAAS,EAAE;MAC9B,OAAO,IAAI,CAAC;KACb;SAAM;MACL,OAAO,CACL,EAAC,IAAI;QACH,cAAQ,KAAK,EAAC,gBAAgB,EAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;UACjE,UAAI,KAAK,EAAC,aAAa,IAAE,UAAU,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,CAAM;UAC/E,SAAG,KAAK,EAAC,MAAM,IAAE,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAK;UACnD,uBAAiB,KAAK,EAAC,eAAe,GAAmB;UACzD,SAAG,KAAK,EAAC,mBAAmB;YAC1B,sBAAgB,KAAK,EAAC,UAAU,EAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAI;;YACzE,sBAAgB,KAAK,EAAC,UAAU,EAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAI,CAC3E;UACJ,SAAG,KAAK,EAAC,qBAAqB,IAAE,IAAI,CAAC,OAAO,CAAC,WAAW,CAAK,CACtD,CACJ,CACR,CAAC;KACH;EACH,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Event, EventEmitter, Host, Prop, State, Watch, h } from '@stencil/core';\r\nimport { Weather } from '../../model/Weather';\r\nimport { daysOfWeek, formatDate } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'cm-weather',\r\n  styleUrl: 'cm-weather.css',\r\n  shadow: true,\r\n})\r\nexport class CmWeather {\r\n  @Prop({ reflect: true, mutable: true }) data: string;\r\n  @State() weather: Weather;\r\n  @Event({ bubbles: true, composed: true }) dayclicked: EventEmitter<string>;\r\n\r\n  componentWillLoad() {\r\n    if (this.data !== '') {\r\n      this.weather = JSON.parse(this.data);\r\n    }\r\n  }\r\n\r\n  @Watch('data')\r\n  changedData() {\r\n    this.weather = JSON.parse(this.data) as Weather;\r\n    console.log(this.weather);\r\n  }\r\n  handleClick() {\r\n    this.dayclicked.emit(this.data);\r\n  }\r\n\r\n  render() {\r\n    if (this.weather === undefined) {\r\n      return null;\r\n    } else {\r\n      return (\r\n        <Host>\r\n          <button class=\"weather-button\" onClick={this.handleClick.bind(this)}>\r\n            <h2 class=\"day-of-week\">{daysOfWeek[new Date(this.weather.date).getDay()]}</h2>\r\n            <p class=\"date\">{formatDate(this.weather.date)}</p>\r\n            <cm-sunmoonimage class=\"sunmoon-image\"></cm-sunmoonimage>\r\n            <p class=\"temperature-range\">\r\n              <cm-temperature class=\"temp-max\" temp={this.weather.temp_max.toString()} />\r\n              / <cm-temperature class=\"temp-min\" temp={this.weather.temp_min.toString()} />\r\n            </p>\r\n            <p class=\"weather-description\">{this.weather.description}</p>\r\n          </button>\r\n        </Host>\r\n      );\r\n    }\r\n  }\r\n}\r\n"]}